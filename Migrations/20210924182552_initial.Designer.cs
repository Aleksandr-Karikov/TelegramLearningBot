// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramLearningBot.Data.Contexts;

namespace TelegramLearningBot.Migrations
{
    [DbContext(typeof(TelegramLearningBotDbContext))]
    [Migration("20210924182552_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Dictionaryies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ThemesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThemesId");

                    b.ToTable("dictionaryies");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TestsId")
                        .HasColumnType("int");

                    b.Property<string>("questionText")
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("TestsId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Tests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ThemesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThemesId");

                    b.ToTable("tests");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Themes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UsersId")
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("themes");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Users", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Words", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DictionaryiesId")
                        .HasColumnType("int");

                    b.Property<string>("LearningWord")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslateOfWord")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryiesId");

                    b.ToTable("words");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Dictionaryies", b =>
                {
                    b.HasOne("TelegramLearningBot.Data.Models.Themes", "Themes")
                        .WithMany()
                        .HasForeignKey("ThemesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Themes");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Questions", b =>
                {
                    b.HasOne("TelegramLearningBot.Data.Models.Tests", "Tests")
                        .WithMany("Questions")
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Tests", b =>
                {
                    b.HasOne("TelegramLearningBot.Data.Models.Themes", "Themes")
                        .WithMany()
                        .HasForeignKey("ThemesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Themes");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Themes", b =>
                {
                    b.HasOne("TelegramLearningBot.Data.Models.Users", "Users")
                        .WithMany("Themes")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Words", b =>
                {
                    b.HasOne("TelegramLearningBot.Data.Models.Dictionaryies", "Dictionaryies")
                        .WithMany("Words")
                        .HasForeignKey("DictionaryiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dictionaryies");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Dictionaryies", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Tests", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TelegramLearningBot.Data.Models.Users", b =>
                {
                    b.Navigation("Themes");
                });
#pragma warning restore 612, 618
        }
    }
}
